// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datanode.proto

package datanode

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_Success       StatusCode = 0
	StatusCode_NotFound      StatusCode = 1
	StatusCode_InternalError StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "Success",
	1: "NotFound",
	2: "InternalError",
}

var StatusCode_value = map[string]int32{
	"Success":       0,
	"NotFound":      1,
	"InternalError": 2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{0}
}

type Ping struct {
	CanReceive           bool     `protobuf:"varint,1,opt,name=canReceive,proto3" json:"canReceive,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetCanReceive() bool {
	if m != nil {
		return m.CanReceive
	}
	return false
}

func (m *Ping) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Petition struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Petition) Reset()         { *m = Petition{} }
func (m *Petition) String() string { return proto.CompactTextString(m) }
func (*Petition) ProtoMessage()    {}
func (*Petition) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{1}
}

func (m *Petition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Petition.Unmarshal(m, b)
}
func (m *Petition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Petition.Marshal(b, m, deterministic)
}
func (m *Petition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Petition.Merge(m, src)
}
func (m *Petition) XXX_Size() int {
	return xxx_messageInfo_Petition.Size(m)
}
func (m *Petition) XXX_DiscardUnknown() {
	xxx_messageInfo_Petition.DiscardUnknown(m)
}

var xxx_messageInfo_Petition proto.InternalMessageInfo

type Response struct {
	Message              string     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status               StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=datanode.StatusCode" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_Success
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ChunkName            string   `protobuf:"bytes,2,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	FileName             string   `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkPos             uint64   `protobuf:"varint,4,opt,name=chunkPos,proto3" json:"chunkPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{3}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Chunk) GetChunkName() string {
	if m != nil {
		return m.ChunkName
	}
	return ""
}

func (m *Chunk) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Chunk) GetChunkPos() uint64 {
	if m != nil {
		return m.ChunkPos
	}
	return 0
}

type ChunkResponse struct {
	Content              []byte     `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ChunkName            string     `protobuf:"bytes,2,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	FileName             string     `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkPos             uint64     `protobuf:"varint,4,opt,name=chunkPos,proto3" json:"chunkPos,omitempty"`
	Status               StatusCode `protobuf:"varint,5,opt,name=status,proto3,enum=datanode.StatusCode" json:"status,omitempty"`
	Message              string     `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ChunkResponse) Reset()         { *m = ChunkResponse{} }
func (m *ChunkResponse) String() string { return proto.CompactTextString(m) }
func (*ChunkResponse) ProtoMessage()    {}
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{4}
}

func (m *ChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkResponse.Unmarshal(m, b)
}
func (m *ChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkResponse.Marshal(b, m, deterministic)
}
func (m *ChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkResponse.Merge(m, src)
}
func (m *ChunkResponse) XXX_Size() int {
	return xxx_messageInfo_ChunkResponse.Size(m)
}
func (m *ChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkResponse proto.InternalMessageInfo

func (m *ChunkResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ChunkResponse) GetChunkName() string {
	if m != nil {
		return m.ChunkName
	}
	return ""
}

func (m *ChunkResponse) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ChunkResponse) GetChunkPos() uint64 {
	if m != nil {
		return m.ChunkPos
	}
	return 0
}

func (m *ChunkResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_Success
}

func (m *ChunkResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FileInfo struct {
	FileName             string   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkPos             uint64   `protobuf:"varint,2,opt,name=chunkPos,proto3" json:"chunkPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{5}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileInfo) GetChunkPos() uint64 {
	if m != nil {
		return m.ChunkPos
	}
	return 0
}

func init() {
	proto.RegisterEnum("datanode.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*Ping)(nil), "datanode.ping")
	proto.RegisterType((*Petition)(nil), "datanode.petition")
	proto.RegisterType((*Response)(nil), "datanode.response")
	proto.RegisterType((*Chunk)(nil), "datanode.chunk")
	proto.RegisterType((*ChunkResponse)(nil), "datanode.chunkResponse")
	proto.RegisterType((*FileInfo)(nil), "datanode.fileInfo")
}

func init() {
	proto.RegisterFile("datanode.proto", fileDescriptor_28a6b9936d34e1c9)
}

var fileDescriptor_28a6b9936d34e1c9 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x53, 0xcb, 0x8e, 0xda, 0x30,
	0x14, 0xc5, 0x34, 0x40, 0xb8, 0xe5, 0xe9, 0x56, 0x6a, 0x14, 0x55, 0x55, 0x95, 0x15, 0xaa, 0x10,
	0xad, 0xe8, 0xa2, 0x52, 0x57, 0x2d, 0xa5, 0xa8, 0x6c, 0x10, 0x32, 0xea, 0xa6, 0x3b, 0x37, 0x31,
	0x4c, 0x44, 0xb0, 0xa3, 0xc4, 0x19, 0x3e, 0x71, 0x3e, 0x69, 0xb6, 0x63, 0x0c, 0xce, 0x83, 0x05,
	0xb3, 0x9b, 0x1d, 0xe7, 0x9e, 0x47, 0x8e, 0x2f, 0x36, 0xf4, 0x02, 0x2a, 0x29, 0x17, 0x01, 0x9b,
	0xc4, 0x89, 0x90, 0x02, 0xdb, 0x06, 0x7b, 0x3f, 0xc0, 0x8a, 0x43, 0xbe, 0xc3, 0x1f, 0x00, 0x7c,
	0xca, 0x09, 0xf3, 0x59, 0x78, 0xcf, 0x1c, 0xf4, 0x11, 0x8d, 0x6c, 0x52, 0x9a, 0x60, 0x07, 0x5a,
	0x07, 0x96, 0xa6, 0x74, 0xc7, 0x9c, 0xba, 0x22, 0xdb, 0xc4, 0x40, 0x0f, 0xc0, 0x8e, 0x99, 0x0c,
	0x65, 0x28, 0xb8, 0x47, 0xc0, 0x4e, 0x58, 0x1a, 0x0b, 0x9e, 0x56, 0x1c, 0xa8, 0xe2, 0xc0, 0x63,
	0x68, 0xa6, 0x92, 0xca, 0x2c, 0xd5, 0x51, 0xbd, 0xe9, 0xdb, 0x49, 0x5e, 0x6f, 0xa3, 0xe7, 0xbf,
	0xd4, 0x4f, 0x72, 0xd1, 0x78, 0x47, 0x68, 0xf8, 0x77, 0x19, 0xdf, 0x9f, 0x02, 0x7d, 0xc1, 0x25,
	0xe3, 0x52, 0x07, 0x76, 0x88, 0x81, 0xf8, 0x3d, 0xb4, 0xb5, 0x64, 0x45, 0x0f, 0xa6, 0x5e, 0x31,
	0xc0, 0x2e, 0xd8, 0xdb, 0x30, 0x62, 0x9a, 0x7c, 0xa5, 0xc9, 0x1c, 0x9f, 0x38, 0x2d, 0x5c, 0x8b,
	0xd4, 0xb1, 0x14, 0x67, 0x91, 0x1c, 0x7b, 0x0f, 0x08, 0xba, 0x1a, 0x90, 0xd2, 0x91, 0x5e, 0xb2,
	0x41, 0x69, 0x51, 0x8d, 0xe7, 0x17, 0x55, 0x5e, 0x78, 0xb3, 0xfa, 0x17, 0xcd, 0xce, 0xdf, 0x5f,
	0xf2, 0xad, 0xa8, 0x74, 0x41, 0x37, 0xba, 0xd4, 0xab, 0x5d, 0x3e, 0x7d, 0x07, 0x28, 0xbe, 0x89,
	0x5f, 0x43, 0x6b, 0x93, 0xf9, 0xbe, 0xca, 0x1f, 0xd4, 0x70, 0x07, 0xec, 0x95, 0x90, 0x0b, 0x91,
	0xf1, 0x60, 0x80, 0xf0, 0x10, 0xba, 0x4b, 0xb5, 0x94, 0x84, 0xd3, 0xe8, 0x77, 0x92, 0x88, 0x64,
	0x50, 0x9f, 0x3e, 0x22, 0xe8, 0xcf, 0x55, 0xf3, 0x95, 0xb2, 0xfe, 0xa1, 0x3c, 0x88, 0x58, 0x82,
	0x55, 0xde, 0xdf, 0x38, 0x12, 0x34, 0x98, 0x09, 0xb1, 0xc7, 0xb8, 0x38, 0x99, 0xb9, 0x4c, 0x6e,
	0x69, 0x66, 0x2e, 0x95, 0x57, 0x1b, 0xa1, 0x2f, 0x08, 0x7f, 0x33, 0xde, 0x85, 0x6a, 0x8e, 0xfb,
	0x85, 0x4e, 0xb7, 0xbd, 0x61, 0xfc, 0x09, 0x9d, 0xb9, 0x38, 0xf2, 0xdc, 0x5a, 0x52, 0x9a, 0x05,
	0xb9, 0xef, 0xae, 0xe2, 0x48, 0x35, 0x62, 0x0c, 0xd6, 0xfa, 0xf4, 0x60, 0x7a, 0xa5, 0xc6, 0x0a,
	0xbb, 0x57, 0xf8, 0xac, 0x9e, 0xbd, 0xf9, 0x37, 0x9c, 0x5f, 0xc6, 0x9f, 0x0d, 0xff, 0xbf, 0xa9,
	0x1f, 0xe1, 0xd7, 0xa7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xf7, 0x46, 0x00, 0x96, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataNodeHandlerClient is the client API for DataNodeHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeHandlerClient interface {
	UploadBook(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_UploadBookClient, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_UploadFileClient, error)
	DownloadFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_DownloadFileClient, error)
	Ping(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_PingClient, error)
}

type dataNodeHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeHandlerClient(cc grpc.ClientConnInterface) DataNodeHandlerClient {
	return &dataNodeHandlerClient{cc}
}

func (c *dataNodeHandlerClient) UploadBook(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_UploadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeHandler_serviceDesc.Streams[0], "/datanode.DataNodeHandler/UploadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeHandlerUploadBookClient{stream}
	return x, nil
}

type DataNodeHandler_UploadBookClient interface {
	Send(*Petition) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dataNodeHandlerUploadBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeHandlerUploadBookClient) Send(m *Petition) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeHandlerUploadBookClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeHandlerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeHandler_serviceDesc.Streams[1], "/datanode.DataNodeHandler/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeHandlerUploadFileClient{stream}
	return x, nil
}

type DataNodeHandler_UploadFileClient interface {
	Send(*Chunk) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dataNodeHandlerUploadFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeHandlerUploadFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeHandlerUploadFileClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeHandlerClient) DownloadFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeHandler_serviceDesc.Streams[2], "/datanode.DataNodeHandler/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeHandlerDownloadFileClient{stream}
	return x, nil
}

type DataNodeHandler_DownloadFileClient interface {
	Send(*FileInfo) error
	Recv() (*ChunkResponse, error)
	grpc.ClientStream
}

type dataNodeHandlerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeHandlerDownloadFileClient) Send(m *FileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeHandlerDownloadFileClient) Recv() (*ChunkResponse, error) {
	m := new(ChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeHandlerClient) Ping(ctx context.Context, opts ...grpc.CallOption) (DataNodeHandler_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeHandler_serviceDesc.Streams[3], "/datanode.DataNodeHandler/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeHandlerPingClient{stream}
	return x, nil
}

type DataNodeHandler_PingClient interface {
	Send(*Ping) error
	Recv() (*Ping, error)
	grpc.ClientStream
}

type dataNodeHandlerPingClient struct {
	grpc.ClientStream
}

func (x *dataNodeHandlerPingClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeHandlerPingClient) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataNodeHandlerServer is the server API for DataNodeHandler service.
type DataNodeHandlerServer interface {
	UploadBook(DataNodeHandler_UploadBookServer) error
	UploadFile(DataNodeHandler_UploadFileServer) error
	DownloadFile(DataNodeHandler_DownloadFileServer) error
	Ping(DataNodeHandler_PingServer) error
}

// UnimplementedDataNodeHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeHandlerServer struct {
}

func (*UnimplementedDataNodeHandlerServer) UploadBook(srv DataNodeHandler_UploadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBook not implemented")
}
func (*UnimplementedDataNodeHandlerServer) UploadFile(srv DataNodeHandler_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedDataNodeHandlerServer) DownloadFile(srv DataNodeHandler_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedDataNodeHandlerServer) Ping(srv DataNodeHandler_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterDataNodeHandlerServer(s *grpc.Server, srv DataNodeHandlerServer) {
	s.RegisterService(&_DataNodeHandler_serviceDesc, srv)
}

func _DataNodeHandler_UploadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeHandlerServer).UploadBook(&dataNodeHandlerUploadBookServer{stream})
}

type DataNodeHandler_UploadBookServer interface {
	Send(*Response) error
	Recv() (*Petition, error)
	grpc.ServerStream
}

type dataNodeHandlerUploadBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeHandlerUploadBookServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeHandlerUploadBookServer) Recv() (*Petition, error) {
	m := new(Petition)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeHandler_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeHandlerServer).UploadFile(&dataNodeHandlerUploadFileServer{stream})
}

type DataNodeHandler_UploadFileServer interface {
	Send(*Response) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dataNodeHandlerUploadFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeHandlerUploadFileServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeHandlerUploadFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeHandler_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeHandlerServer).DownloadFile(&dataNodeHandlerDownloadFileServer{stream})
}

type DataNodeHandler_DownloadFileServer interface {
	Send(*ChunkResponse) error
	Recv() (*FileInfo, error)
	grpc.ServerStream
}

type dataNodeHandlerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeHandlerDownloadFileServer) Send(m *ChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeHandlerDownloadFileServer) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeHandler_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeHandlerServer).Ping(&dataNodeHandlerPingServer{stream})
}

type DataNodeHandler_PingServer interface {
	Send(*Ping) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type dataNodeHandlerPingServer struct {
	grpc.ServerStream
}

func (x *dataNodeHandlerPingServer) Send(m *Ping) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeHandlerPingServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataNodeHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.DataNodeHandler",
	HandlerType: (*DataNodeHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBook",
			Handler:       _DataNodeHandler_UploadBook_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _DataNodeHandler_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _DataNodeHandler_DownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Ping",
			Handler:       _DataNodeHandler_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datanode.proto",
}
